import express from 'express';
import { Octokit } from '@octokit/rest';
import axios from 'axios';
import OpenAI from 'openai';

const router = express.Router();

// Initialize OpenAI (uses OPENAI_API_KEY from env)
const openai = new OpenAI();

// Initialize GitHub (will use user's token from request)
const createGitHubClient = (token) => {
  return new Octokit({ auth: token });
};

/**
 * Complete Page Builder System
 * 1. User provides description
 * 2. AI generates complete code
 * 3. Push to GitHub
 * 4. Deploy to Cloudflare Pages
 * 5. Return live URL
 */

router.post('/create', async (req, res) => {
  try {
    const {
      projectType, // 'page', 'website', 'store'
      description,
      style = 'modern',
      features = [],
      githubToken,
      githubUsername,
      repoName,
      cloudflareAccountId,
      cloudflareApiToken
    } = req.body;

    // Use GITHUB_TOKEN from env if not provided
    const finalGithubToken = githubToken || process.env.GITHUB_TOKEN;
    const finalGithubUsername = githubUsername || 'yasoo2';

    if (!description || !finalGithubToken || !finalGithubUsername) {
      return res.status(400).json({
        ok: false,
        error: 'Missing required fields: description, githubToken, githubUsername'
      });
    }

    console.log(`üé® Creating ${projectType}: ${description.substring(0, 50)}...`);

    // Step 1: Generate code with AI
    console.log('üìù Step 1: Generating code with AI...');
    const code = await generateCode(projectType, description, style, features);

    // Step 2: Create/Update GitHub repository
    console.log('üì§ Step 2: Pushing to GitHub...');
    const finalRepoName = repoName || generateRepoName(description);
    const githubUrl = await pushToGitHub(
      finalGithubToken,
      finalGithubUsername,
      finalRepoName,
      code,
      projectType
    );

    // Step 3: Deploy to Cloudflare Pages (if credentials provided)
    let liveUrl = null;
    if (cloudflareAccountId && cloudflareApiToken) {
      console.log('üöÄ Step 3: Deploying to Cloudflare Pages...');
      liveUrl = await deployToCloudflare(
        cloudflareAccountId,
        cloudflareApiToken,
        finalRepoName,
        finalGithubUsername,
        code
      );
    }

    console.log('‚úÖ Page Builder completed successfully!');

    res.json({
      ok: true,
      message: 'Project created successfully!',
      projectType,
      repoName: finalRepoName,
      githubUrl,
      liveUrl,
      filesGenerated: Object.keys(code).length,
      metadata: {
        createdAt: new Date().toISOString(),
        aiModel: 'gemini-2.0-flash-exp'
      }
    });

  } catch (error) {
    console.error('‚ùå Page Builder Error:', error);
    res.status(500).json({
      ok: false,
      error: error.message
    });
  }
});

/**
 * Generate preview without deploying
 */
router.post('/preview', async (req, res) => {
  try {
    const {
      projectType,
      description,
      style = 'modern',
      features = []
    } = req.body;

    if (!description) {
      return res.status(400).json({
        ok: false,
        error: 'Missing required field: description'
      });
    }

    console.log(`üëÄ Generating preview for ${projectType}...`);

    const code = await generateCode(projectType, description, style, features);

    res.json({
      ok: true,
      message: 'Preview generated successfully',
      code,
      filesCount: Object.keys(code).length
    });

  } catch (error) {
    console.error('‚ùå Preview Error:', error);
    res.status(500).json({
      ok: false,
      error: error.message
    });
  }
});

// Helper Functions

async function generateCode(projectType, description, style, features) {
  const prompt = buildPrompt(projectType, description, style, features);
  
  // Use OpenAI-compatible API with gemini-2.5-flash
  const completion = await openai.chat.completions.create({
    model: 'gemini-2.5-flash',
    messages: [{ role: 'user', content: prompt }],
    temperature: 0.7
  });
  
  let generatedText = completion.choices[0].message.content;

  // Parse the generated code into files
  const code = parseGeneratedCode(generatedText, projectType);
  
  return code;
}

function buildPrompt(projectType, description, style, features) {
  const basePrompt = `You are an expert web developer. Generate a complete, production-ready ${projectType}.

**Project Type**: ${projectType}
**Description**: ${description}
**Style**: ${style}
**Features**: ${features.join(', ') || 'Standard features'}

**Requirements**:
1. Generate COMPLETE, working code
2. Use modern HTML5, CSS3, JavaScript
3. Make it responsive (mobile-friendly)
4. Include beautiful ${style} design
5. Add smooth animations and transitions
6. Use best practices and clean code
7. Include all necessary files

**File Structure**:
${projectType === 'page' ? `
- index.html (complete HTML)
- styles.css (all styles)
- script.js (all JavaScript)
` : projectType === 'website' ? `
- index.html (home page)
- about.html (about page)
- contact.html (contact page)
- styles.css (global styles)
- script.js (global JavaScript)
` : `
- index.html (store homepage)
- products.html (products page)
- cart.html (shopping cart)
- checkout.html (checkout page)
- styles.css (store styles)
- script.js (store functionality with cart)
`}

**Design Guidelines**:
- ${style === 'modern' ? 'Clean, minimalist, gradient backgrounds, glass-morphism effects' : ''}
- ${style === 'minimal' ? 'Simple, lots of whitespace, monochrome colors' : ''}
- ${style === 'creative' ? 'Bold colors, unique layouts, artistic elements' : ''}
- ${style === 'professional' ? 'Corporate, trustworthy, blue/gray tones' : ''}
- ${style === 'playful' ? 'Bright colors, fun animations, rounded corners' : ''}

**Output Format**:
Return the code in this exact format:

\`\`\`html:index.html
[Complete HTML code here]
\`\`\`

\`\`\`css:styles.css
[Complete CSS code here]
\`\`\`

\`\`\`javascript:script.js
[Complete JavaScript code here]
\`\`\`

${projectType !== 'page' ? `
\`\`\`html:about.html
[Complete about page HTML]
\`\`\`

\`\`\`html:contact.html
[Complete contact page HTML]
\`\`\`
` : ''}

${projectType === 'store' ? `
\`\`\`html:products.html
[Complete products page]
\`\`\`

\`\`\`html:cart.html
[Complete cart page]
\`\`\`

\`\`\`html:checkout.html
[Complete checkout page]
\`\`\`
` : ''}

Generate ONLY the code files, no explanations.`;

  return basePrompt;
}

function parseGeneratedCode(text, projectType) {
  const files = {};
  
  // Match code blocks with filename: ```language:filename
  const codeBlockRegex = /```(\w+):([^\n]+)\n([\s\S]*?)```/g;
  let match;
  
  while ((match = codeBlockRegex.exec(text)) !== null) {
    const [, language, filename, code] = match;
    files[filename.trim()] = code.trim();
  }

  // If no files found, try simpler format
  if (Object.keys(files).length === 0) {
    // Try to extract HTML, CSS, JS separately
    const htmlMatch = text.match(/```html\n([\s\S]*?)```/);
    const cssMatch = text.match(/```css\n([\s\S]*?)```/);
    const jsMatch = text.match(/```(?:javascript|js)\n([\s\S]*?)```/);

    if (htmlMatch) files['index.html'] = htmlMatch[1].trim();
    if (cssMatch) files['styles.css'] = cssMatch[1].trim();
    if (jsMatch) files['script.js'] = jsMatch[1].trim();
  }

  // Ensure we have at least index.html
  if (!files['index.html']) {
    throw new Error('Failed to generate HTML code');
  }

  return files;
}

async function pushToGitHub(token, username, repoName, files, projectType) {
  const octokit = createGitHubClient(token);

  try {
    // Check if repo exists
    let repo;
    try {
      repo = await octokit.repos.get({
        owner: username,
        repo: repoName
      });
    } catch (error) {
      // Repo doesn't exist, create it
      repo = await octokit.repos.createForAuthenticatedUser({
        name: repoName,
        description: `${projectType} generated by InfinityX AI`,
        auto_init: true,
        private: false
      });
    }

    // Get the default branch
    const branch = repo.data.default_branch || 'main';

    // Get the latest commit SHA
    const { data: ref } = await octokit.git.getRef({
      owner: username,
      repo: repoName,
      ref: `heads/${branch}`
    });
    const latestCommitSha = ref.object.sha;

    // Get the tree SHA
    const { data: commit } = await octokit.git.getCommit({
      owner: username,
      repo: repoName,
      commit_sha: latestCommitSha
    });
    const baseTreeSha = commit.tree.sha;

    // Create blobs for each file
    const tree = [];
    for (const [filename, content] of Object.entries(files)) {
      const { data: blob } = await octokit.git.createBlob({
        owner: username,
        repo: repoName,
        content: Buffer.from(content).toString('base64'),
        encoding: 'base64'
      });

      tree.push({
        path: filename,
        mode: '100644',
        type: 'blob',
        sha: blob.sha
      });
    }

    // Create new tree
    const { data: newTree } = await octokit.git.createTree({
      owner: username,
      repo: repoName,
      base_tree: baseTreeSha,
      tree
    });

    // Create commit
    const { data: newCommit } = await octokit.git.createCommit({
      owner: username,
      repo: repoName,
      message: `üöÄ Update ${projectType} - Generated by InfinityX AI`,
      tree: newTree.sha,
      parents: [latestCommitSha]
    });

    // Update reference
    await octokit.git.updateRef({
      owner: username,
      repo: repoName,
      ref: `heads/${branch}`,
      sha: newCommit.sha
    });

    return `https://github.com/${username}/${repoName}`;

  } catch (error) {
    console.error('GitHub Error:', error);
    throw new Error(`Failed to push to GitHub: ${error.message}`);
  }
}

async function deployToCloudflare(accountId, apiToken, projectName, githubUsername, files) {
  // Note: Cloudflare Pages deployment via API is complex
  // For now, we'll return GitHub Pages URL
  // Full Cloudflare deployment would require wrangler or direct upload
  
  // Return GitHub Pages URL as fallback
  return `https://${githubUsername}.github.io/${projectName}`;
}

function generateRepoName(description) {
  // Generate a clean repo name from description
  const cleaned = description
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .substring(0, 50);
  
  const timestamp = Date.now().toString().slice(-6);
  return `${cleaned}-${timestamp}`;
}

export default router;
